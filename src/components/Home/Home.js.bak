import React from 'react';
import PropTypes from 'prop-types';
import './Home.css';

const Home = ({
  session,
  articles,
  onChange,
  onKeyDown,
  onAddComment,
  onClickLike,
  onClickComment,
  onRemoveComment,
  onClickShare,
  onRouteToPost,
  onCopyLink,
  onFollowStatus,
  onClickViewMore
}) => {
  const articleItems = articles.map(
    (article) => {
      const { 
        id, type, writer, title, content, items, folding, openRange, 
        chips, files, likes, comments, comment, commentActive } = article;

      const imageFiles = files.map(
        (file, idx) => {
          return (
            <a className="carousel-item" key={idx}>
              <img alt={idx} src={file.src} />
            </a>
          )
        }
      );

      let imageItems;
      let carouselInstance;
      if (files.length > 0) {
        imageItems = (
          <div 
            className="carousel carousel-slider upload-images"
            ref={ ref => carouselInstance = window.M.Carousel.init(ref, {
              fullWidth: true,
              noWrap: true,
              indicators: true,
            }) }
          >
            {imageFiles}
          </div>
        )
      } else {
        imageItems = (<div></div>);
      }

      const index = likes.findIndex( like => like.email === session.email);
      let favorite;
      if (index > -1) {
        favorite = "favorite";
      } else {
        favorite = "favorite_border";
      }
      
      const chatBubble = commentActive ? 'chat_bubble' : 'chat_bubble_outline';
      
      const commentItems = comments.map(
        ({id: commentId, email, nickname, content}, idx) => {
          
          const removeItem = email === session.email
            ? (
              <a className="comment-remove-icon" 
                onClick={() => onRemoveComment(id, commentId)}>
                <i className="material-icons light-blue-text text-darken-4">clear</i>
              </a>
              )
            : (<div></div>);

          return (
            <div key={idx} className="comment">
              <div className="comment-nickname">
              {`${nickname} `}
              </div>
              &nbsp;
              <div className="comment-content">
              {`${content}`}
              </div>
              {removeItem}
            </div>
          )
        }
      );

      const bucketItems = items.map(
        ({id, name, done}, idx) => {
          return (
            <li key={id} className="collection-item bucketlist-item">
              <span className="indigo-text text-darken-4">{idx + 1}.</span> {name}
            </li>
          )
        }
      );

      const allBucketItems = items.map(
        ({id, name, done}, idx) => {
          
          return (
            <li key={id} className="collection-item bucketlist-item">
              <span className="indigo-text text-darken-4">{idx + 1}.</span> {name}
            </li>
          )
        }
      );

      const viewMore = items.length > 3 
      ? (
          <div className="view-more" onClick={() => onClickViewMore(id)}>
            { folding ? '접기' : '더 보기' }
          </div>
        )
      : ( <div></div> );


      return (
        <article key={id} className="post-wrapper">
          <header className="writer">
            <img 
              className="circle responsive-img"
              src={writer.profileImage} 
              alt={writer.name} />
            <div className="username">
              <a className="grey-text text-darken-4">{writer.name}</a>
            </div> 
            <div 
              className="btn-more dropdown-trigger"
              data-target="dropdown-more"
              ref={
                (ref) => {
                  window.M.Dropdown.init(ref, {
                    contrainWidth: true
                  });
              }}
            >
              <i className="material-icons">more_horiz</i>
            </div>

            <ul id='dropdown-more' className='dropdown-content'>
              <li><a onClick={() => onRouteToPost(id)}>게시물로 이동</a></li>
              <li><a onClick={() => onCopyLink(id)}>링크 복사하기</a></li>
              <li><a onClick={() => onFollowStatus(id)}>팔로우 취소</a></li>
              <li><a>취소</a></li>
            </ul>
          </header>
          <div className="info">
            <div className="info-title">
              {title}
            </div>
            <div className="info-content">
              { type === 1 
                ? ( 
                    <div>
                      <ul className="collection">
                        {folding ? bucketItems : bucketItems.slice(0, 3)}
                      </ul>
                      {viewMore}
                    </div>
                  )
                : content }
            </div>
            {imageItems}
          </div>
          <footer className="post-footer">
              <i 
                className={`material-icons ${favorite === "favorite" ? 'red-text text-accent-4': ''}`}
                onClick={ () => {
                  onClickLike(id);
                }}
              >
                {favorite}
              </i>
              <i 
                className="material-icons"
                onClick={ () => {
                  onClickComment(id);
                }}
              >
                {chatBubble}
              </i>

              <div className="footer-flex"></div>
              <i styles={{width: "24px"}}></i>
              <i 
                className="material-icons"
                onClick={ () => {
                  onClickShare(id);
                }}
              >
                share
              </i>
          </footer>
          <div className="post-likes">
            {`좋아요 ${likes.length}개`}
          </div>
          <div className="post-comments">
            {commentItems}
          </div>
          <div className={`post-comment-input ${commentActive ? 'active' : ''}`}>
            <input 
              type="text" 
              name="comment"
              className="validate" 
              placeholder="댓글 달기..."
              value={comment}
              disabled={commentActive}
              onChange={(e) => onChange(e, id)}
              onKeyDown={(e) => onKeyDown(e, id)}
            />
            <div className="btn-flat" onClick={() => onAddComment(id)}>
              게시
            </div>
          </div>
        </article>
      )
    }
  );

  return (
    <div>
      <header className="page-header">
        <div className="logo">Bucket list</div>
        <div className="add-btn">
          <i className="material-icons">add</i>
        </div>
      </header>
      {articleItems}
    </div>
  )
};

Home.propTypes = {
  session: PropTypes.shape({
    email: PropTypes.string,
    nickname: PropTypes.string
  }),
  articles: PropTypes.array,  
  onChange: PropTypes.func,
  onKeyDown: PropTypes.func,
  onAddComment: PropTypes.func,
  onClickLike: PropTypes.func,
  onClickComment: PropTypes.func,
  onClickShare: PropTypes.func,
  onRouteToPost: PropTypes.func,
  onCopyLink: PropTypes.func,
  onFollowStatus: PropTypes.func,
  onClickViewMore: PropTypes.func,
};

Home.defaultProps = {
  session: {},
  articles: [],
  onChange: () => console.warn('onChange not defined'),
  onKeyDown: () => console.warn('onKeyDown not defined'),
  onAddComment: () => console.warn('onAddComment not defined'),
  onClickLike: () => console.warn('onClickLike not defined'),
  onClickComment: () => console.warn('onclickComment not defined'),
  onClickShare: () => console.warn('onClickShare not defined'),
  onRouteToPost: () => console.warn('onRouteToPost not defined'),
  onCopyLink: () => console.warn('onCopyLink not defined'),
  onFollowStatus: () => console.warn('onFollowStatus not defined'),
  onClickViewMore: () => console.warn('onClickViewMore not defined')
};

export default Home;